---
layout: basic
title: Apple setup
---

Before you are able to use Push Notifications on your iOS Application, a few steps are required. This section of the tutorial gives a quick overview of what is needed!

== Certificate Signing Request

First you need to submit a request for a new digital certificate, which is based on a public/private key. The Certificate itself is acting as the public key, and when you request it, a private key is added to your *KeyChain* tool. Now the actual CSR (Certificate Signing Request) is done using *KeyChain Access*: In there choose *Certificate Assistant > Request a Certificate from a Certificate Authority*:

image::./img/SubmitCSR.png[Submit Signing Request]

Make sure that you have choosen to store the CSR _on file_, since you need it later to request an SSL certificate for the _Apple Push Network Service_. Going back to *KeyChain Access* you now see a new *private* key:

image::./img/KeyChain_prtKey.png[private]

== Apple App ID and SSL certificate for APNs

Now that you have your CSR, go to the link:https://developer.apple.com/account/overview.action[Provisioning Portal] and log in there. Now click on the *Identifiers* link in order to create a new App ID (use the *PLUS* Icon on the right). In the formular give the *App ID* a _descriptive_ name, like *My first AeroGear Push App*. Double check that the *Push Notifications* checkbox is _selected_:


image::./img/AppID_1.png[Give the App ID a name]


Later in the same page you are asked for an *Explicit App ID*, since the generic *Wildcard App ID* does not work with Push Notifications. In the _Bundle ID_ field enter *org.aerogear.PushTest*, because that is the ID of our app, that we are building in this tutorial. *NOTE:* The _Bundle ID_ has to match the one from the actual iOS app.


image::./img/AppID_2.png[Apply the Bundle ID from our App]

In the next screen confirm your new App ID, and double check that the _Push Notifications_ option is _enabled_, afterwards click the _Submit_ button! Now you are _Done_. In the next screen, click on on the newly create *App ID*:

image::./img/AppID_3.png[Overview]

Here click the _Settings_ button and create a _Development SSL Certificate_:

image::./img/SSLCert.png[SSL Certificate]
 
Inside of the next Dialog you are asked to upload the _Certificate Signing Request_ that we created earlier. Now perform an upload of the *CSR* and click the _Generate_ button:

image::./img/SSLCert_upload.png[CSR upload]

Finishing the upload dialog, you are coming back to the overview of the *App ID*. Now you can download the *Development SSL Certificate* that Apple has created for you:

image::./img/SSLCert_download.png[SSL Certificate download]

The file is being downloaded as _aps_developer_identity.cer_. Double click on it and it shows up in the *KeyChain Access* tool:

image::./img/PushCert.png[APNs certificate]

Now you have to export this certifcate/private key pair to the *.p12* (_Personal Information Exchange_):

image::./img/PushCert_Export.png[Export to .p12 format]

== Provisioning Profile

Next you need a _provisioning profiles_. Create an _iOS App Development_ provisioning profile, so that you can test the Push Notifications on your own iOS devices:

image::./img/Provisioning_profile_1.png[Development Profile]


Now, select the previous _App ID_:

image::./img/Select_APP_ID.png[Select App ID]

Select your Developer Certificate:

image::./img/DevCert.png[Select Developer Cert]

Select a "Test" Device:

image::./img/TestDevice.png[Choose Test Devices]

Give it a Profile Name and generate it:

image::./img/ProfileName.png[Give the Profile a Name]

Now dowload the Profile and open the file. It will be added to Xcode's Organizer:

image::./img/XcodeOrganizer.png[Xcode Organizer shows the new Provisioning Profile]



== Xcode

dasdasdas
ads
das
adssad



[source,objective-c]
----
// NSURL object:
NSURL* serverURL = [NSURL URLWithString:@"http://todo-aerogear.rhcloud.com/todo-server/"];
----

