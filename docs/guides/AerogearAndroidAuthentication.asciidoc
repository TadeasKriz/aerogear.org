---
layout: basic
title: AeroGear Android Authentication
---

== AeroGear Android Authentication

The goal of this guide is to provide a description of how authentication works in AeroGear Android and to give developers the ability to integrate their Android application with AeroGear-Controller based services as well as other RESTful services.

In RESTful services there are two basic parts of Authentication:

* Logging in and Fetching a token
* Applying the token to a request

This guide will go indepth on these two topics; however, we will also discuss briefly:

* Registering a new user
* Logging out of a service

== The Authentication API

Interaction with Authentication services is mediated using classes which implement the *AuthenticationModule* interface, register themselves with the *Authenticator* factory class, and apply themselves to a *Pipe* using *PipeConfig*.

*AuthenticationModule* wraps up URL fields for enrolling, logging in, and logging out and defines the methods which call these URLs.  Once a login has been succesfully completed, it also provides an *AuthorizationFields* object which encapuslates the necessary parameteres for applying authorization to a request via a *Pipe*.

*Authenticator* is a manager and a factory.  It can consume an *AuthenticationConfig* object and instanciate a module tuned to work with an AeroGear Controller based server, or you can create a custom *AuthenticationModule* and register it with then *Authenticator*.  *Authenticator* also supplies getters which can wrap any *AuthenticationModule* in a proxy which delegates calls to the server to an Android Loader.

*AbstractAuthenticationModule* is a convenience class for integrating with non AeroGear REST services.  It is also useful for when you want to only support a subset of the *AuthenticationModule*\'s functionality, and it configures a THREAD_POOL_EXECUTOR for you to delegate your network calls to.  

=== Using Authentication: The TODO App
For an example of using the Authentication API to connect to a AeroGear Controller, let\'s look at https://github.com/aerogear/aerogear-android-todo.

==== Setting up Authentication

.ToDoApplication
[source,java]
----

//Class definitions, exceptions, and full configuration of Pipes are snipped for clarity.

URL baseURL = new URL("http://todoauth-aerogear.rhcloud.com/todo-server");
private Pipeline pipeline = new Pipeline(baseURL);;
private Authenticator auth = new Authenticator(baseURL);

@Override
public void onCreate() {
	super.onCreate();
	
	//Supply configuration
	AuthenticationConfig config = new AuthenticationConfig();
	config.setEnrollEndpoint("/auth/register");

	//Create AuthenticationModule
	AuthenticationModule authModule = auth.auth("login", config);

	//Add AuthenticationModule to Pipe
	PipeConfig pipeConfigTask = new PipeConfig(baseURL, Task.class);
	pipeConfigTask.setAuthModule(authModule);
	pipeline.pipe(Task.class, pipeConfigTask);

}
----

==== Using Authentication

While the application is not logged in, *AuthenticationModule* will stay out of the way.  However, interacting with authentication is this simple.

.AuthenticationMethodsExample
[source,java]
----
public void login(FragmentActivity activity, String username, String password,
			Callback<HeaderAndBody> callback) {
	//This method proxies the AuthenticationModule in a SupportAuthenticationModuleAdapter
	//which uses Android\'s Loader API to make the calls to the AuthernticationModule
	auth.get("login", activity).login(username, password, callback);

}

public void logout(FragmentActivity activity, Callback<Void> callback) {
	//This method proxies the AuthenticationModule in a SupportAuthenticationModuleAdapter
	//which uses Android\'s Loader API to make the calls to the AuthernticationModule
	auth.get("login", activity).logout(callback);
}

public void enroll(FragmentActivity activity, String firstName, String lastName, String emailAddress,
		String username, String password, String role,
		Callback<HeaderAndBody> callback) {

	HashMap<String, String> userData = new HashMap<String, String>();
	userData.put("firstname", firstName);
	userData.put("lastname", lastName);
	userData.put("email", emailAddress);
	userData.put("username", username);
	userData.put("password", password);
	userData.put("role", role);

	//This method proxies the AuthenticationModule in a SupportAuthenticationModuleAdapter
	//which uses Android\'s Loader API to make the calls to the AuthernticationModule
	auth.get("login", activity).enroll(userData, callback);
}
----

=== Using Authentication: Custom Applications

AeroGear Android\'s Authentication API provides a framework for supporting many other RESTful services.  Obviously this guide cannot cover all of them, but we will review custom authentication with one third party service, Reddit.  

Reddit\'s login consumes a HTTP POST with the Content-Type of application/x-www-form-urlencoded.  It returns a JSON response with parameters \"data.modhash\" and \"data.cookie\" which are required for authorization later.  These parameters must be passed as HTTP Headers when requests are made.  This is shown in the _getAuthorizationFields_ method.

==== A custom AuthenticationModule

.RedditAuthenticationModule
[source,java]
----
public class RedditAuthenticationModule extends AbstractAuthenticationModule {
 
    private String authToken = "";
    private String modHash;
 
    public void login(final String username, final String password,
		    final Callback<HeaderAndBody> callback) {
        THREAD_POOL_EXECUTOR.execute(new Runnable() {
		private Exception exception;
		private HeaderAndBody result;

		@Override
		public void run() {
		        try {
		        	HttpProvider provider = new HttpRestProvider(getLoginURL(username));
		        	provider.setDefaultHeader("User-Agent", "AeroGear StoryList Demo /u/secondsun");
		        	provider.setDefaultHeader("Content-Type", "application/x-www-form-urlencoded");
		        	String loginData = buildLoginData(username, password);
				result = provider.post(loginData);
				Log.d("Auth", new String(result.getBody()));
				String json = new String(result.getBody());
				JsonObject obj = new JsonParser().parse(json).getAsJsonObject().get("json").getAsJsonObject();
				modHash = obj.get("data").getAsJsonObject().get("modhash").getAsString();
				authToken = obj.get("data").getAsJsonObject().get("cookie").getAsString();
				isLoggedIn = true;
		        } catch (Exception e) {
		            Log.e(RedditAuthenticationModule.class.getSimpleName(), 
		            	  "Error with Login", e);
		            exception = e;
		        }

			if (exception == null) {
		            callback.onSuccess(this.result);
		        } else {
		            callback.onFailure(exception);
		        }
		        
		}

		private String buildLoginData(String username, String password) {
        	    	StringBuilder builder = new StringBuilder();
        	    	builder.append("user=").append(URLEncoder.encode(username))
	            	.append("&api_type=json&passwd=").append(URLEncoder.encode(password));
                	 return builder.toString();
		}

	});


	}
 
    public AuthorizationFields getAuthorizationFields() {
 
        AuthorizationFields fields = new AuthorizationFields();
        fields.addHeader("User-Agent", "AeroGear StoryList Demo /u/secondsun");
        if (isLoggedIn) {
            fields.addHeader("Cookie", "reddit_session="+authToken);
            fields.addQueryParameter("uh", modHash);
        }
        return fields;
    }
     
}
----



