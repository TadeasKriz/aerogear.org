---
layout: basic
title: Aerogear Android Data Store
---

== Data Store Api

Aerogear Android provides a simple data storage API.  This API is usful for caching responses, sharing data among different systems, or providing some form of limited offline support.  

=== API Overview  

*DataManager* 
 : A factory and provider of *Store* implementations.  It behaves similarly to *Pipeline* and *Authenticator*.  Since *Store* implementations are synchronous, it does not have nor provide Loader wrappers.

*Store*
 : An interface which different store implementations implement.

*StoreTypes* 
: An enum class with values *MEMORY* and *SQL*. 

*SQLStore*  
: A Store implementation which writes to a backing SQLLite database.  

*MemoryStore*
: A Store implementation which is backed by a HashMap in memory.

=== Examples

==== Creating a Memory Store

To create a MemoryStore we can use a **StoreConfig** bean and **DataManager**. A Memory store will go away when the application is removed from memory and is best used for short term caching.  Also it can not perform nested querying of its data.

[source,java]
----
    StoreConfig memoryStoreConfig = new StoreConfig();  
    memoryStoreConfig.setContext(getApplicationContext());  
    memoryStoreConfig.setType(MEMORY);  
    memoryStoreConfig.setKlass(Data.class);  
    Store store = dataManager.store("memoryStore", memoryStoreConfig);    
----

==== Creating a SQLStore

To create a SQLStore we can use a **StoreConfig** bean and **DataManager**. A SQL store needs to be opened using the *open* method. *Open* takes a **Callback** which is called after the database is ready for writing.

[source,java]
----
    StoreConfig sqlStoreConfig = new StoreConfig();  
    sqlStoreConfig.setContext(Robolectric.application.getApplicationContext());  
    sqlStoreConfig.setType(SQL);  
    sqlStoreConfig.setKlass(Data.class);  
    Store store = dataManager.store("sqlStore", sqlStoreConfig);  
    ((SQLStore))store).open(/*callback*/);  
----

=== Using Stores
Both Store types implement the same interface.  In the case of a SQLStore you will need to make sure open has been called before you use any of these methods however.

==== Saving Data  

[source,java]
----
    Data data = new Data(10, "name", "description");//Id, name, description  
    store.save(data);  
    Data readData = store.read(10);  
----

==== Clearing the data store  


[source,java]
----
    store.reset();  
    Data readData = store.read(10);  
    Assert.assertNull(readData);  
----

==== Reading All Data  

[source,java]
----
    store.save(new Data(1, "name", "description"));  
    store.save(new Data((2, "name", "description"));  
    store.save(new Data((3, "name2", "description"));  
    store.save(new Data((4, "name2", "description"));  
    store.save(new Data((5, "name", "description2"));  
    store.save(new Data((6, "name2", "description2"));
    
    List<data> allData = new ArrayList</data><data>(store.readAll());  
    Collections.sort(allData);  
    Assert.assertEquals(6, allData.size());  
    Assert.assertEquals("name", allData.get(0).getName());  
    Assert.assertEquals("name2", allData.get(5).getName());  
----

==== Deleting Data  

[source,java]
----
    loadBulkData(); //Loads 6 "Data" Elements
    store.remove(1); //Deletes the element with ID 1  
----

==== Searching Data  
*Note:* Filtering only supports exact matches  
*Note:* MemoryStore can conly filter using top level properties.  It will not look at nested properties in the *ReadFilter* or in the object.  Trying to do so will cause an Exception.

[source,java]
----
    loadBulkData(); //Loads 6 "Data" Elements
    
    result = store.readWithFilter(null);  
    Assert.assertEquals(6, result.size());
    
    filter = new ReadFilter();  
    where = new JSONObject();  
    where.put("name", "name2");  
    filter.setWhere(where);  
    result = store.readWithFilter(filter);  
    Assert.assertEquals(3, result.size());
    
    filter = new ReadFilter();  
    where = new JSONObject();  
    where.put("name", "name2");  
    where.put("description", "description");  
    filter.setWhere(where);  
    result = store.readWithFilter(filter);  
    Assert.assertEquals(2, result.size());  
----
