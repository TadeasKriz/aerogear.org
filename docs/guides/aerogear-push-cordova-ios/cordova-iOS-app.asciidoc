---
layout: basic
title: Apache Cordova iOS application
---

Creating a Cordova push application
-----------------------------------

Before we start, please install link:https://github.com/apache/cordova-cli/[Apache Cordova CLI], which is the command line tool to build, deploy and manage Cordova-based applications.

Next you need to _install_ the *Cordova Push Notifications Plugin for Android and iOS*. With the 3.0.x version of Apache Cordova you need to clone this link:https://github.com/jdhiro/PushPlugin[fork/repo]. Once checkout out, _remember_ the installation path of the repository.

Sample App
~~~~~~~~~~

Creating a Cordova app is simple:

[source,c]
----
cordova create FolderOfTheApp com.my.id.AppName AppName
cd FolderOfTheApp
cordova platform add ios
cordova plugin add folder_of_PushPlugin
----

*Note:* Make sure your Apple App ID matches the above _com.my.id.AppName_ value, otherwise it will *_not_* work.

JavaScript libraries
~~~~~~~~~~~~~~~~~~~~

Next install the link:http://aerogear.org/download/[+aerogear.js+ library] and the latest link:http://jquery.com/download[jQuery] version. Save these files into the +www+ folder of your Apache Cordova project.

Build the iOS application
~~~~~~~~~~~~~~~~~~~~~~~~~

It is now time to build the actual iOS project:

[source,c]
----
cordova build
----

In order to start playing with the project, you need to open the +FolderOfTheApp.xcodeproj+ file, located in +platforms/ios/+.

The JavaScript
~~~~~~~~~~~~~~

Inside of the +index.html+ you need to add references to the required JavaScript files:

[source,javascript]
----
...
<script type="text/javascript" src="jquery-1.10.2.min.js"></script>
<script type="text/javascript" src="aerogear.js"></script>
<script type="text/javascript" src="cordova.js"></script>
<script type="text/javascript" src="PushNotification.js"></script>
<script type="text/javascript" src="js/index.js"></script>
<script type="text/javascript">
    app.initialize();
</script>
...
----

Besides the aerogear.js and its dependency, the +PushNotification.js+ file from the PushPlugin needs to be referenced as well. For the purpose of this demo we continue to use the +js/index.js+ file for our application. Below is the entire file:

[source,javascript]
----
// handle the incoming APNS notifications for iOS
function onNotificationAPN(e) {
    // display the push notification message... (extract the APNs alert key value....)
    alert(e.alert);
}

var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicity call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        // note that this is an event handler so the scope is that of the event
        // so we need to call app.report(), and not this.report()
        app.initAeroGearPush();

        app.receivedEvent('deviceready');
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id);
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');

        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');

        console.log('Received Event: ' + id);
    },
    initAeroGearPush: function() {
        // get the push plugin object
        var pushNotification = window.plugins.pushNotification;
        // set callbacks for dealing with the DeviceToken, or an Error
        pushNotification.register(
            // set callback for dealing with the DeviceToken
            function(token) {
                // create the unified push helper:
                var client = AeroGear.UnifiedPushClient(
                     "variantID",
                     "variant secret",
                     "https://SERVER:PORT/CONTEXT/rest/registry/device"
                );

                // apply the metadata for the Apache Cordova client:
                var metadata = {
                    deviceToken: token,
                    alias: "username"
                }

                // register with the UP server:
                client.registerWithPushServer(metadata);
            },
            // set callback when no deviceToken could be received (from APNs)
            function() {
                console.log("Fail");
            },
            // Setting options to allow badge,sound and alert APNs keys
            {
                "badge":"true",
                "sound":"true",
                "alert":"true",
                "ecb":"onNotificationAPN"
            }
        );
    }
};
----

Most of the code is actually already there, generated by Apache Cordova, so let's dive into the details.

Push Notification registry and setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the beginning of the file there is a +onNotificationAPN+ function, which is a JavaScript callback that is receiving the APNs notifications, while the application is running. For this demo we simply use the +alert+ function to display the message:

[source,javascript]
----
// handle the incomming APNS notifications for iOS
function onNotificationAPN(e) {
    // display the push notification message... (extract the APNs alert key value....)
    alert(e.alert);
}
----

To trigger the setup of the _PushPlugin_ we have added a +initAeroGearPush+ function onto the +app+ scope, the function is invoked by the +onDeviceReady+ function which itself is invoked once the Apache Cordova related initialization is done. The is responsible to get a reference of the Plugin's +pushNotification+ object in order to invoke its +register+ function:

[source,javascript]
----
initAeroGearPush: function() {
    // get the push plugin object
    var pushNotification = window.plugins.pushNotification;

    // set callbacks for dealing with the device token or an Error.
    // The options specify the interest of the different APNs message event types.
    pushNotification.register(successCallback, errorCallback, options);
}
----

The +successCallback+ is an anonymous JavaScript function that is invoked if the iOS environment could receive a device token from the APNs servers. The plugin executes the required native bits (similar like explained in the link:/docs/guides/aerogear-push-ios[iOS Push Tutorial]) and passes the token to the given function. If an error occurs within the registration with the APNs servers the +errorCallback+ is invoked. The _interesting_ part is the +options+ object: It tells the plugin what type of notification messages the application is interested in. The +options+ object also takes a note of the JavaScript function that receives the notifications, while the application is active. Remember the +onNotificationAPN+ function from the beginning of the JavaScript file?

In case of a successful registration the +successCallback+ is being invoked. In the demo we use a anonymous JavaScript function to receive the device token:

[source,javascript]
----
function(token) {
    // create the unified push helper:
    var client = AeroGear.UnifiedPushClient(
        "variantID",
        "variant secret",
        "https://SERVER:PORT/CONTEXT/rest/registry/device"
    );

    // apply the metadata for the Apache Cordova client:
    var metadata = {
        deviceToken: token,
        alias: "username"
    }

    // register with the UP server:
    client.registerWithPushServer(metadata);
}
----

Inside of the +successCallback+ we create a UnifiedPushClient, passing along the _variant ID_, _variant secret_ and the _registration url_. Next we create a literal object, containing the +deviceToken+ from the iOS device and setting an +alias+ (e.g. a username or an email address). Finally we perform a registration with the UnifiedPush server.

The +errorCallback+ is pretty trivial, simply doing a +console.log("Fail");+, but let's have a detailed look at the +options+ object:

[source,javascript]
----
{
    "badge":"true",
    "sound":"true",
    "alert":"true",
    "ecb":"onNotificationAPN"
}
----

Here we tell the plugin that we would like to be notified by iOS for received _badge_, _sound_ and _alert_ events. The last part specifies the event callback (+ecb+) that gets called when your device receives a notification. Here we finally have a reference to the +onNotificationAPN+ function.

Test the app on your device
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now run the app on the device. After agreeing on receiving Push Messages, you will see the default Apache Cordova page from the generated project. Now put the app into the background, by clicking the home button.


Sending messages to the device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The last chapter shows how to link:../send-push[send messages] to the device, using the _AeroGear UnifiedPush Server_!

